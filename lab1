#include <stdio.h>
#include<time.h>
#include<stdlib.h>
void delay(){
    int u;
    for(u=0;u<400;u++);
}
int lsearch(int arr[],int size ,int x){
    int rec;
    size--;
    if(size>=0){
        if(arr[size]==x){
        
        return size;}
        else 
        lsearch(arr,size,x);
        
    }
else {

    return -1;}
}
int bisearch(int arr[],int x,int startindex,int endindex){
     
   if(endindex>=startindex){
    int mididex=startindex+(endindex-startindex)/2;
    if(arr[mididex]==x)
    {
        
        return mididex;
    }
     if(x>arr[mididex]){
        
    startindex=mididex+1;
    return bisearch(arr,x,startindex,endindex);
    }
    else 
    {
        endindex=mididex-1;
    return bisearch(arr,x,startindex,endindex);
    }
   }
     return -1;
}

int main()
{
    clock_t start,end;
    
    int arr[10000],n,key,choice,temp;
    

    int size =size-1;
    while(1){
    printf("MENU\n1.BINARY\n2.LINEAR\nEnter the choice:");
    scanf("%d",&choice);
    switch(choice)
    {
   case 1:
    n=1000;
   while(n<5000){
   for(int i=0;i<n;i++){
       arr[i]=i;}
       key=arr[n-1];
   start=clock();
   int biSearch=bisearch(arr,key,0,n);
       if(biSearch==-1){
           printf("Key not found\n");
       }
       else printf("Key found at %d\n",biSearch);
       for(int j=0;j<5000000;j++){
           temp=38/600;
       }
       end=clock();
       printf("TIME FOR N=%d IS %f SECS\n",n,(((double)(end-start))/CLOCKS_PER_SEC));
       n=n+1000;
   }
           break;
   case 2:
        n=1000;
         while(n<5000){
             
         for(int i=0;i<n;i++ ){
             arr[i]=i;
         }
         key=arr[n-1];
         start=clock();
         
          int Lsearch=lsearch(arr,n,key);
             if(Lsearch==-1){
                 printf("key not found\n");
             }else printf("key found at %d\n",Lsearch);
             for(int f=0;f<500000;f++) 
             temp=38/600;
             end =clock();
             printf("TIME FOR N=%d IS %f SECs\n",n,(((double)(end-start))/CLOCKS_PER_SEC));
             n=n+1000;
             
         }
           break;
   default: printf("Wrong choice");
    }
}
    return 0;
}
